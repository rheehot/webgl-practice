{"mappings":"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","sources":["./lib/sylvester.js","./lib/sylvester-utils.js","./src/index.js"],"sourcesContent":["var Sylvester = {\n  precision: 1e-6\n};\n\nSylvester.Vector = function() {};\n\nSylvester.Vector.create = function(elements) {\n  var V = new Sylvester.Vector();\n  return V.setElements(elements);\n};\nvar $V = Sylvester.Vector.create;\n\nSylvester.Vector.Random = function(n) {\n  var elements = [];\n  while (n--) { elements.push(Math.random()); }\n  return Sylvester.Vector.create(elements);\n};\n\nSylvester.Vector.Zero = function(n) {\n  var elements = [];\n  while (n--) { elements.push(0); }\n  return Sylvester.Vector.create(elements);\n};\n\nSylvester.Vector.prototype = {\n  e: function(i) {\n    return (i < 1 || i > this.elements.length) ? null : this.elements[i-1];\n  },\n\n  dimensions: function() {\n    return this.elements.length;\n  },\n\n  modulus: function() {\n    return Math.sqrt(this.dot(this));\n  },\n\n  eql: function(vector) {\n    var n = this.elements.length;\n    var V = vector.elements || vector;\n    if (n !== V.length) { return false; }\n    while (n--) {\n      if (Math.abs(this.elements[n] - V[n]) > Sylvester.precision) { return false; }\n    }\n    return true;\n  },\n\n  dup: function() {\n    return Sylvester.Vector.create(this.elements);\n  },\n\n  map: function(fn, context) {\n    var elements = [];\n    this.each(function(x, i) {\n      elements.push(fn.call(context, x, i));\n    });\n    return Sylvester.Vector.create(elements);\n  },\n\n  forEach: function(fn, context) {\n    var n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      fn.call(context, this.elements[i], i+1);\n    }\n  },\n\n  toUnitVector: function() {\n    var r = this.modulus();\n    if (r === 0) { return this.dup(); }\n    return this.map(function(x) { return x/r; });\n  },\n\n  angleFrom: function(vector) {\n    var V = vector.elements || vector;\n    var n = this.elements.length, k = n, i;\n    if (n !== V.length) { return null; }\n    var dot = 0, mod1 = 0, mod2 = 0;\n    // Work things out in parallel to save time\n    this.each(function(x, i) {\n      dot += x * V[i-1];\n      mod1 += x * x;\n      mod2 += V[i-1] * V[i-1];\n    });\n    mod1 = Math.sqrt(mod1); mod2 = Math.sqrt(mod2);\n    if (mod1*mod2 === 0) { return null; }\n    var theta = dot / (mod1*mod2);\n    if (theta < -1) { theta = -1; }\n    if (theta > 1) { theta = 1; }\n    return Math.acos(theta);\n  },\n\n  isParallelTo: function(vector) {\n    var angle = this.angleFrom(vector);\n    return (angle === null) ? null : (angle <= Sylvester.precision);\n  },\n\n  isAntiparallelTo: function(vector) {\n    var angle = this.angleFrom(vector);\n    return (angle === null) ? null : (Math.abs(angle - Math.PI) <= Sylvester.precision);\n  },\n\n  isPerpendicularTo: function(vector) {\n    var dot = this.dot(vector);\n    return (dot === null) ? null : (Math.abs(dot) <= Sylvester.precision);\n  },\n\n  add: function(vector) {\n    var V = vector.elements || vector;\n    if (this.elements.length !== V.length) { return null; }\n    return this.map(function(x, i) { return x + V[i-1]; });\n  },\n\n  subtract: function(vector) {\n    var V = vector.elements || vector;\n    if (this.elements.length !== V.length) { return null; }\n    return this.map(function(x, i) { return x - V[i-1]; });\n  },\n\n  multiply: function(k) {\n    return this.map(function(x) { return x*k; });\n  },\n\n  dot: function(vector) {\n    var V = vector.elements || vector;\n    var i, product = 0, n = this.elements.length;\n    if (n !== V.length) { return null; }\n    while (n--) { product += this.elements[n] * V[n]; }\n    return product;\n  },\n\n  cross: function(vector) {\n    var B = vector.elements || vector;\n    if (this.elements.length !== 3 || B.length !== 3) { return null; }\n    var A = this.elements;\n    return Sylvester.Vector.create([\n      (A[1] * B[2]) - (A[2] * B[1]),\n      (A[2] * B[0]) - (A[0] * B[2]),\n      (A[0] * B[1]) - (A[1] * B[0])\n    ]);\n  },\n\n  max: function() {\n    var m = 0, i = this.elements.length;\n    while (i--) {\n      if (Math.abs(this.elements[i]) > Math.abs(m)) { m = this.elements[i]; }\n    }\n    return m;\n  },\n\n  indexOf: function(x) {\n    var index = null, n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      if (index === null && this.elements[i] === x) {\n        index = i + 1;\n      }\n    }\n    return index;\n  },\n\n  toDiagonalMatrix: function() {\n    return Sylvester.Matrix.Diagonal(this.elements);\n  },\n\n  round: function() {\n    return this.map(function(x) { return Math.round(x); });\n  },\n\n  snapTo: function(x) {\n    return this.map(function(y) {\n      return (Math.abs(y - x) <= Sylvester.precision) ? x : y;\n    });\n  },\n\n  distanceFrom: function(obj) {\n    if (obj.anchor || (obj.start && obj.end)) { return obj.distanceFrom(this); }\n    var V = obj.elements || obj;\n    if (V.length !== this.elements.length) { return null; }\n    var sum = 0, part;\n    this.each(function(x, i) {\n      part = x - V[i-1];\n      sum += part * part;\n    });\n    return Math.sqrt(sum);\n  },\n\n  liesOn: function(line) {\n    return line.contains(this);\n  },\n\n  liesIn: function(plane) {\n    return plane.contains(this);\n  },\n\n  rotate: function(t, obj) {\n    var V, R = null, x, y, z;\n    if (t.determinant) { R = t.elements; }\n    switch (this.elements.length) {\n      case 2:\n        V = obj.elements || obj;\n        if (V.length !== 2) { return null; }\n        if (!R) { R = Sylvester.Matrix.Rotation(t).elements; }\n        x = this.elements[0] - V[0];\n        y = this.elements[1] - V[1];\n        return Sylvester.Vector.create([\n          V[0] + R[0][0] * x + R[0][1] * y,\n          V[1] + R[1][0] * x + R[1][1] * y\n        ]);\n        break;\n      case 3:\n        if (!obj.direction) { return null; }\n        var C = obj.pointClosestTo(this).elements;\n        if (!R) { R = Sylvester.Matrix.Rotation(t, obj.direction).elements; }\n        x = this.elements[0] - C[0];\n        y = this.elements[1] - C[1];\n        z = this.elements[2] - C[2];\n        return Sylvester.Vector.create([\n          C[0] + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n          C[1] + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n          C[2] + R[2][0] * x + R[2][1] * y + R[2][2] * z\n        ]);\n        break;\n      default:\n        return null;\n    }\n  },\n\n  reflectionIn: function(obj) {\n    if (obj.anchor) {\n      // obj is a plane or line\n      var P = this.elements.slice();\n      var C = obj.pointClosestTo(P).elements;\n      return Sylvester.Vector.create([C[0] + (C[0] - P[0]), C[1] + (C[1] - P[1]), C[2] + (C[2] - (P[2] || 0))]);\n    } else {\n      // obj is a point\n      var Q = obj.elements || obj;\n      if (this.elements.length !== Q.length) { return null; }\n      return this.map(function(x, i) { return Q[i-1] + (Q[i-1] - x); });\n    }\n  },\n\n  to3D: function() {\n    var V = this.dup();\n    switch (V.elements.length) {\n      case 3: break;\n      case 2: V.elements.push(0); break;\n      default: return null;\n    }\n    return V;\n  },\n\n  inspect: function() {\n    return '[' + this.elements.join(', ') + ']';\n  },\n\n  setElements: function(els) {\n    this.elements = (els.elements || els).slice();\n    return this;\n  }\n};\n\nSylvester.Vector.prototype.x = Sylvester.Vector.prototype.multiply;\nSylvester.Vector.prototype.each = Sylvester.Vector.prototype.forEach;\n\nSylvester.Vector.i = Sylvester.Vector.create([1,0,0]);\nSylvester.Vector.j = Sylvester.Vector.create([0,1,0]);\nSylvester.Vector.k = Sylvester.Vector.create([0,0,1]);\n\nSylvester.Matrix = function() {};\n\nSylvester.Matrix.create = function(elements) {\n  var M = new Sylvester.Matrix();\n  return M.setElements(elements);\n};\nvar $M = Sylvester.Matrix.create;\n\nSylvester.Matrix.I = function(n) {\n  var els = [], i = n, j;\n  while (i--) { j = n;\n    els[i] = [];\n    while (j--) {\n      els[i][j] = (i === j) ? 1 : 0;\n    }\n  }\n  return Sylvester.Matrix.create(els);\n};\n\nSylvester.Matrix.Diagonal = function(elements) {\n  var i = elements.length;\n  var M = Sylvester.Matrix.I(i);\n  while (i--) {\n    M.elements[i][i] = elements[i];\n  }\n  return M;\n};\n\nSylvester.Matrix.Rotation = function(theta, a) {\n  if (!a) {\n    return Sylvester.Matrix.create([\n      [Math.cos(theta),  -Math.sin(theta)],\n      [Math.sin(theta),   Math.cos(theta)]\n    ]);\n  }\n  var axis = a.dup();\n  if (axis.elements.length !== 3) { return null; }\n  var mod = axis.modulus();\n  var x = axis.elements[0]/mod, y = axis.elements[1]/mod, z = axis.elements[2]/mod;\n  var s = Math.sin(theta), c = Math.cos(theta), t = 1 - c;\n  // Formula derived here: http://www.gamedev.net/reference/articles/article1199.asp\n  // That proof rotates the co-ordinate system so theta becomes -theta and sin\n  // becomes -sin here.\n  return Sylvester.Matrix.create([\n    [ t*x*x + c, t*x*y - s*z, t*x*z + s*y ],\n    [ t*x*y + s*z, t*y*y + c, t*y*z - s*x ],\n    [ t*x*z - s*y, t*y*z + s*x, t*z*z + c ]\n  ]);\n};\n\nSylvester.Matrix.RotationX = function(t) {\n  var c = Math.cos(t), s = Math.sin(t);\n  return Sylvester.Matrix.create([\n    [  1,  0,  0 ],\n    [  0,  c, -s ],\n    [  0,  s,  c ]\n  ]);\n};\nSylvester.Matrix.RotationY = function(t) {\n  var c = Math.cos(t), s = Math.sin(t);\n  return Sylvester.Matrix.create([\n    [  c,  0,  s ],\n    [  0,  1,  0 ],\n    [ -s,  0,  c ]\n  ]);\n};\nSylvester.Matrix.RotationZ = function(t) {\n  var c = Math.cos(t), s = Math.sin(t);\n  return Sylvester.Matrix.create([\n    [  c, -s,  0 ],\n    [  s,  c,  0 ],\n    [  0,  0,  1 ]\n  ]);\n};\n\nSylvester.Matrix.Random = function(n, m) {\n  return Sylvester.Matrix.Zero(n, m).map(\n    function() { return Math.random(); }\n  );\n};\n\nSylvester.Matrix.Zero = function(n, m) {\n  var els = [], i = n, j;\n  while (i--) { j = m;\n    els[i] = [];\n    while (j--) {\n      els[i][j] = 0;\n    }\n  }\n  return Sylvester.Matrix.create(els);\n};\n\nSylvester.Matrix.prototype = {\n  e: function(i,j) {\n    if (i < 1 || i > this.elements.length || j < 1 || j > this.elements[0].length) { return null; }\n    return this.elements[i-1][j-1];\n  },\n\n  row: function(i) {\n    if (i > this.elements.length) { return null; }\n    return Sylvester.Vector.create(this.elements[i-1]);\n  },\n\n  col: function(j) {\n    if (this.elements.length === 0) { return null; }\n    if (j > this.elements[0].length) { return null; }\n    var col = [], n = this.elements.length;\n    for (var i = 0; i < n; i++) { col.push(this.elements[i][j-1]); }\n    return Sylvester.Vector.create(col);\n  },\n\n  dimensions: function() {\n    var cols = (this.elements.length === 0) ? 0 : this.elements[0].length;\n    return {rows: this.elements.length, cols: cols};\n  },\n\n  rows: function() {\n    return this.elements.length;\n  },\n\n  cols: function() {\n    if (this.elements.length === 0) { return 0; }\n    return this.elements[0].length;\n  },\n\n  eql: function(matrix) {\n    var M = matrix.elements || matrix;\n    if (!M[0] || typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    if (this.elements.length === 0 || M.length === 0) {\n      return this.elements.length === M.length;\n    }\n    if (this.elements.length !== M.length) { return false; }\n    if (this.elements[0].length !== M[0].length) { return false; }\n    var i = this.elements.length, nj = this.elements[0].length, j;\n    while (i--) { j = nj;\n      while (j--) {\n        if (Math.abs(this.elements[i][j] - M[i][j]) > Sylvester.precision) { return false; }\n      }\n    }\n    return true;\n  },\n\n  dup: function() {\n    return Sylvester.Matrix.create(this.elements);\n  },\n\n  map: function(fn, context) {\n    if (this.elements.length === 0) { return Sylvester.Matrix.create([]); }\n    var els = [], i = this.elements.length, nj = this.elements[0].length, j;\n    while (i--) { j = nj;\n      els[i] = [];\n      while (j--) {\n        els[i][j] = fn.call(context, this.elements[i][j], i + 1, j + 1);\n      }\n    }\n    return Sylvester.Matrix.create(els);\n  },\n\n  isSameSizeAs: function(matrix) {\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    if (this.elements.length === 0) { return M.length === 0; }\n    return (this.elements.length === M.length &&\n        this.elements[0].length === M[0].length);\n  },\n\n  add: function(matrix) {\n    if (this.elements.length === 0) return this.map(function(x) { return x });\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    if (!this.isSameSizeAs(M)) { return null; }\n    return this.map(function(x, i, j) { return x + M[i-1][j-1]; });\n  },\n\n  subtract: function(matrix) {\n    if (this.elements.length === 0) return this.map(function(x) { return x });\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    if (!this.isSameSizeAs(M)) { return null; }\n    return this.map(function(x, i, j) { return x - M[i-1][j-1]; });\n  },\n\n  canMultiplyFromLeft: function(matrix) {\n    if (this.elements.length === 0) { return false; }\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    // this.columns should equal matrix.rows\n    return (this.elements[0].length === M.length);\n  },\n\n  multiply: function(matrix) {\n    if (this.elements.length === 0) { return null; }\n    if (!matrix.elements) {\n      return this.map(function(x) { return x * matrix; });\n    }\n    var returnVector = matrix.modulus ? true : false;\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    if (!this.canMultiplyFromLeft(M)) { return null; }\n    var i = this.elements.length, nj = M[0].length, j;\n    var cols = this.elements[0].length, c, elements = [], sum;\n    while (i--) { j = nj;\n      elements[i] = [];\n      while (j--) { c = cols;\n        sum = 0;\n        while (c--) {\n          sum += this.elements[i][c] * M[c][j];\n        }\n        elements[i][j] = sum;\n      }\n    }\n    var M = Sylvester.Matrix.create(elements);\n    return returnVector ? M.col(1) : M;\n  },\n\n  minor: function(a, b, c, d) {\n    if (this.elements.length === 0) { return null; }\n    var elements = [], ni = c, i, nj, j;\n    var rows = this.elements.length, cols = this.elements[0].length;\n    while (ni--) { i = c - ni - 1;\n      elements[i] = [];\n      nj = d;\n      while (nj--) { j = d - nj - 1;\n        elements[i][j] = this.elements[(a+i-1)%rows][(b+j-1)%cols];\n      }\n    }\n    return Sylvester.Matrix.create(elements);\n  },\n\n  transpose: function() {\n    if (this.elements.length === 0) return Sylvester.Matrix.create([]);\n    var rows = this.elements.length, i, cols = this.elements[0].length, j;\n    var elements = [], i = cols;\n    while (i--) { j = rows;\n      elements[i] = [];\n      while (j--) {\n        elements[i][j] = this.elements[j][i];\n      }\n    }\n    return Sylvester.Matrix.create(elements);\n  },\n\n  isSquare: function() {\n    var cols = (this.elements.length === 0) ? 0 : this.elements[0].length;\n    return (this.elements.length === cols);\n  },\n\n  max: function() {\n    if (this.elements.length === 0) { return null; }\n    var m = 0, i = this.elements.length, nj = this.elements[0].length, j;\n    while (i--) { j = nj;\n      while (j--) {\n        if (Math.abs(this.elements[i][j]) > Math.abs(m)) { m = this.elements[i][j]; }\n      }\n    }\n    return m;\n  },\n\n  indexOf: function(x) {\n    if (this.elements.length === 0) { return null; }\n    var index = null, ni = this.elements.length, i, nj = this.elements[0].length, j;\n    for (i = 0; i < ni; i++) {\n      for (j = 0; j < nj; j++) {\n        if (this.elements[i][j] === x) { return {i: i+1, j: j+1}; }\n      }\n    }\n    return null;\n  },\n\n  diagonal: function() {\n    if (!this.isSquare) { return null; }\n    var els = [], n = this.elements.length;\n    for (var i = 0; i < n; i++) {\n      els.push(this.elements[i][i]);\n    }\n    return Sylvester.Vector.create(els);\n  },\n\n  toRightTriangular: function() {\n    if (this.elements.length === 0) return Sylvester.Matrix.create([]);\n    var M = this.dup(), els;\n    var n = this.elements.length, i, j, np = this.elements[0].length, p;\n    for (i = 0; i < n; i++) {\n      if (M.elements[i][i] === 0) {\n        for (j = i + 1; j < n; j++) {\n          if (M.elements[j][i] !== 0) {\n            els = [];\n            for (p = 0; p < np; p++) { els.push(M.elements[i][p] + M.elements[j][p]); }\n            M.elements[i] = els;\n            break;\n          }\n        }\n      }\n      if (M.elements[i][i] !== 0) {\n        for (j = i + 1; j < n; j++) {\n          var multiplier = M.elements[j][i] / M.elements[i][i];\n          els = [];\n          for (p = 0; p < np; p++) {\n            // Elements with column numbers up to an including the number of the\n            // row that we're subtracting can safely be set straight to zero,\n            // since that's the point of this routine and it avoids having to\n            // loop over and correct rounding errors later\n            els.push(p <= i ? 0 : M.elements[j][p] - M.elements[i][p] * multiplier);\n          }\n          M.elements[j] = els;\n        }\n      }\n    }\n    return M;\n  },\n\n  determinant: function() {\n    if (this.elements.length === 0) { return 1; }\n    if (!this.isSquare()) { return null; }\n    var M = this.toRightTriangular();\n    var det = M.elements[0][0], n = M.elements.length;\n    for (var i = 1; i < n; i++) {\n      det = det * M.elements[i][i];\n    }\n    return det;\n  },\n\n  isSingular: function() {\n    return (this.isSquare() && this.determinant() === 0);\n  },\n\n  trace: function() {\n    if (this.elements.length === 0) { return 0; }\n    if (!this.isSquare()) { return null; }\n    var tr = this.elements[0][0], n = this.elements.length;\n    for (var i = 1; i < n; i++) {\n      tr += this.elements[i][i];\n    }\n    return tr;\n  },\n\n  rank: function() {\n    if (this.elements.length === 0) { return 0; }\n    var M = this.toRightTriangular(), rank = 0;\n    var i = this.elements.length, nj = this.elements[0].length, j;\n    while (i--) { j = nj;\n      while (j--) {\n        if (Math.abs(M.elements[i][j]) > Sylvester.precision) { rank++; break; }\n      }\n    }\n    return rank;\n  },\n\n  augment: function(matrix) {\n    if (this.elements.length === 0) { return this.dup(); }\n    var M = matrix.elements || matrix;\n    if (typeof(M[0][0]) === 'undefined') { M = Sylvester.Matrix.create(M).elements; }\n    var T = this.dup(), cols = T.elements[0].length;\n    var i = T.elements.length, nj = M[0].length, j;\n    if (i !== M.length) { return null; }\n    while (i--) { j = nj;\n      while (j--) {\n        T.elements[i][cols + j] = M[i][j];\n      }\n    }\n    return T;\n  },\n\n  inverse: function() {\n    if (this.elements.length === 0) { return null; }\n    if (!this.isSquare() || this.isSingular()) { return null; }\n    var n = this.elements.length, i= n, j;\n    var M = this.augment(Sylvester.Matrix.I(n)).toRightTriangular();\n    var np = M.elements[0].length, p, els, divisor;\n    var inverse_elements = [], new_element;\n    // Sylvester.Matrix is non-singular so there will be no zeros on the\n    // diagonal. Cycle through rows from last to first.\n    while (i--) {\n      // First, normalise diagonal elements to 1\n      els = [];\n      inverse_elements[i] = [];\n      divisor = M.elements[i][i];\n      for (p = 0; p < np; p++) {\n        new_element = M.elements[i][p] / divisor;\n        els.push(new_element);\n        // Shuffle off the current row of the right hand side into the results\n        // array as it will not be modified by later runs through this loop\n        if (p >= n) { inverse_elements[i].push(new_element); }\n      }\n      M.elements[i] = els;\n      // Then, subtract this row from those above it to give the identity matrix\n      // on the left hand side\n      j = i;\n      while (j--) {\n        els = [];\n        for (p = 0; p < np; p++) {\n          els.push(M.elements[j][p] - M.elements[i][p] * M.elements[j][i]);\n        }\n        M.elements[j] = els;\n      }\n    }\n    return Sylvester.Matrix.create(inverse_elements);\n  },\n\n  round: function() {\n    return this.map(function(x) { return Math.round(x); });\n  },\n\n  snapTo: function(x) {\n    return this.map(function(p) {\n      return (Math.abs(p - x) <= Sylvester.precision) ? x : p;\n    });\n  },\n\n  inspect: function() {\n    var matrix_rows = [];\n    var n = this.elements.length;\n    if (n === 0) return '[]';\n    for (var i = 0; i < n; i++) {\n      matrix_rows.push(Sylvester.Vector.create(this.elements[i]).inspect());\n    }\n    return matrix_rows.join('\\n');\n  },\n\n  setElements: function(els) {\n    var i, j, elements = els.elements || els;\n    if (elements[0] && typeof(elements[0][0]) !== 'undefined') {\n      i = elements.length;\n      this.elements = [];\n      while (i--) { j = elements[i].length;\n        this.elements[i] = [];\n        while (j--) {\n          this.elements[i][j] = elements[i][j];\n        }\n      }\n      return this;\n    }\n    var n = elements.length;\n    this.elements = [];\n    for (i = 0; i < n; i++) {\n      this.elements.push([elements[i]]);\n    }\n    return this;\n  }\n};\n\nSylvester.Matrix.prototype.toUpperTriangular = Sylvester.Matrix.prototype.toRightTriangular;\nSylvester.Matrix.prototype.det = Sylvester.Matrix.prototype.determinant;\nSylvester.Matrix.prototype.tr = Sylvester.Matrix.prototype.trace;\nSylvester.Matrix.prototype.rk = Sylvester.Matrix.prototype.rank;\nSylvester.Matrix.prototype.inv = Sylvester.Matrix.prototype.inverse;\nSylvester.Matrix.prototype.x = Sylvester.Matrix.prototype.multiply;\n\nSylvester.Line = function() {};\n\nSylvester.Line.prototype = {\n  eql: function(line) {\n    return (this.isParallelTo(line) && this.contains(line.anchor));\n  },\n\n  dup: function() {\n    return Sylvester.Line.create(this.anchor, this.direction);\n  },\n\n  translate: function(vector) {\n    var V = vector.elements || vector;\n    return Sylvester.Line.create([\n      this.anchor.elements[0] + V[0],\n      this.anchor.elements[1] + V[1],\n      this.anchor.elements[2] + (V[2] || 0)\n    ], this.direction);\n  },\n\n  isParallelTo: function(obj) {\n    if (obj.normal || (obj.start && obj.end)) { return obj.isParallelTo(this); }\n    var theta = this.direction.angleFrom(obj.direction);\n    return (Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision);\n  },\n\n  distanceFrom: function(obj) {\n    if (obj.normal || (obj.start && obj.end)) { return obj.distanceFrom(this); }\n    if (obj.direction) {\n      // obj is a line\n      if (this.isParallelTo(obj)) { return this.distanceFrom(obj.anchor); }\n      var N = this.direction.cross(obj.direction).toUnitVector().elements;\n      var A = this.anchor.elements, B = obj.anchor.elements;\n      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n    } else {\n      // obj is a point\n      var P = obj.elements || obj;\n      var A = this.anchor.elements, D = this.direction.elements;\n      var PA1 = P[0] - A[0], PA2 = P[1] - A[1], PA3 = (P[2] || 0) - A[2];\n      var modPA = Math.sqrt(PA1*PA1 + PA2*PA2 + PA3*PA3);\n      if (modPA === 0) return 0;\n      // Assumes direction vector is normalized\n      var cosTheta = (PA1 * D[0] + PA2 * D[1] + PA3 * D[2]) / modPA;\n      var sin2 = 1 - cosTheta*cosTheta;\n      return Math.abs(modPA * Math.sqrt(sin2 < 0 ? 0 : sin2));\n    }\n  },\n\n  contains: function(obj) {\n    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }\n    var dist = this.distanceFrom(obj);\n    return (dist !== null && dist <= Sylvester.precision);\n  },\n\n  positionOf: function(point) {\n    if (!this.contains(point)) { return null; }\n    var P = point.elements || point;\n    var A = this.anchor.elements, D = this.direction.elements;\n    return (P[0] - A[0]) * D[0] + (P[1] - A[1]) * D[1] + ((P[2] || 0) - A[2]) * D[2];\n  },\n\n  liesIn: function(plane) {\n    return plane.contains(this);\n  },\n\n  intersects: function(obj) {\n    if (obj.normal) { return obj.intersects(this); }\n    return (!this.isParallelTo(obj) && this.distanceFrom(obj) <= Sylvester.precision);\n  },\n\n  intersectionWith: function(obj) {\n    if (obj.normal || (obj.start && obj.end)) { return obj.intersectionWith(this); }\n    if (!this.intersects(obj)) { return null; }\n    var P = this.anchor.elements, X = this.direction.elements,\n        Q = obj.anchor.elements, Y = obj.direction.elements;\n    var X1 = X[0], X2 = X[1], X3 = X[2], Y1 = Y[0], Y2 = Y[1], Y3 = Y[2];\n    var PsubQ1 = P[0] - Q[0], PsubQ2 = P[1] - Q[1], PsubQ3 = P[2] - Q[2];\n    var XdotQsubP = - X1*PsubQ1 - X2*PsubQ2 - X3*PsubQ3;\n    var YdotPsubQ = Y1*PsubQ1 + Y2*PsubQ2 + Y3*PsubQ3;\n    var XdotX = X1*X1 + X2*X2 + X3*X3;\n    var YdotY = Y1*Y1 + Y2*Y2 + Y3*Y3;\n    var XdotY = X1*Y1 + X2*Y2 + X3*Y3;\n    var k = (XdotQsubP * YdotY / XdotX + XdotY * YdotPsubQ) / (YdotY - XdotY * XdotY);\n    return Sylvester.Vector.create([P[0] + k*X1, P[1] + k*X2, P[2] + k*X3]);\n  },\n\n  pointClosestTo: function(obj) {\n    if (obj.start && obj.end) {\n      // obj is a line segment\n      var P = obj.pointClosestTo(this);\n      return (P === null) ? null : this.pointClosestTo(P);\n    } else if (obj.direction) {\n      // obj is a line\n      if (this.intersects(obj)) { return this.intersectionWith(obj); }\n      if (this.isParallelTo(obj)) { return null; }\n      var D = this.direction.elements, E = obj.direction.elements;\n      var D1 = D[0], D2 = D[1], D3 = D[2], E1 = E[0], E2 = E[1], E3 = E[2];\n      // Create plane containing obj and the shared normal and intersect this\n      // with it Thank you:\n      // http://www.cgafaq.info/wiki/Sylvester.Line-line_distance\n      var x = (D3 * E1 - D1 * E3), y = (D1 * E2 - D2 * E1), z = (D2 * E3 - D3 * E2);\n      var N = [x * E3 - y * E2, y * E1 - z * E3, z * E2 - x * E1];\n      var P = Sylvester.Plane.create(obj.anchor, N);\n      return P.intersectionWith(this);\n    } else {\n      // obj is a point\n      var P = obj.elements || obj;\n      if (this.contains(P)) { return Sylvester.Vector.create(P); }\n      var A = this.anchor.elements, D = this.direction.elements;\n      var D1 = D[0], D2 = D[1], D3 = D[2], A1 = A[0], A2 = A[1], A3 = A[2];\n      var x = D1 * (P[1]-A2) - D2 * (P[0]-A1), y = D2 * ((P[2] || 0) - A3) - D3 * (P[1]-A2),\n          z = D3 * (P[0]-A1) - D1 * ((P[2] || 0) - A3);\n      var V = Sylvester.Vector.create([D2 * x - D3 * z, D3 * y - D1 * x, D1 * z - D2 * y]);\n      var k = this.distanceFrom(P) / V.modulus();\n      return Sylvester.Vector.create([\n        P[0] + V.elements[0] * k,\n        P[1] + V.elements[1] * k,\n        (P[2] || 0) + V.elements[2] * k\n      ]);\n    }\n  },\n\n  // Returns a copy of the line rotated by t radians about the given line. Works\n  // by finding the argument's closest point to this line's anchor point (call\n  // this C) and rotating the anchor about C. Also rotates the line's direction\n  // about the argument's. Be careful with this - the rotation axis' direction\n  // affects the outcome!\n  rotate: function(t, line) {\n    // If we're working in 2D\n    if (typeof(line.direction) === 'undefined') { line = Sylvester.Line.create(line.to3D(), Sylvester.Vector.k); }\n    var R = Sylvester.Matrix.Rotation(t, line.direction).elements;\n    var C = line.pointClosestTo(this.anchor).elements;\n    var A = this.anchor.elements, D = this.direction.elements;\n    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\n    var x = A1 - C1, y = A2 - C2, z = A3 - C3;\n    return Sylvester.Line.create([\n      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\n    ], [\n      R[0][0] * D[0] + R[0][1] * D[1] + R[0][2] * D[2],\n      R[1][0] * D[0] + R[1][1] * D[1] + R[1][2] * D[2],\n      R[2][0] * D[0] + R[2][1] * D[1] + R[2][2] * D[2]\n    ]);\n  },\n\n  reverse: function() {\n    return Sylvester.Line.create(this.anchor, this.direction.x(-1));\n  },\n\n  reflectionIn: function(obj) {\n    if (obj.normal) {\n      // obj is a plane\n      var A = this.anchor.elements, D = this.direction.elements;\n      var A1 = A[0], A2 = A[1], A3 = A[2], D1 = D[0], D2 = D[1], D3 = D[2];\n      var newA = this.anchor.reflectionIn(obj).elements;\n      // Add the line's direction vector to its anchor, then mirror that in the plane\n      var AD1 = A1 + D1, AD2 = A2 + D2, AD3 = A3 + D3;\n      var Q = obj.pointClosestTo([AD1, AD2, AD3]).elements;\n      var newD = [Q[0] + (Q[0] - AD1) - newA[0], Q[1] + (Q[1] - AD2) - newA[1], Q[2] + (Q[2] - AD3) - newA[2]];\n      return Sylvester.Line.create(newA, newD);\n    } else if (obj.direction) {\n      // obj is a line - reflection obtained by rotating PI radians about obj\n      return this.rotate(Math.PI, obj);\n    } else {\n      // obj is a point - just reflect the line's anchor in it\n      var P = obj.elements || obj;\n      return Sylvester.Line.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.direction);\n    }\n  },\n\n  setVectors: function(anchor, direction) {\n    // Need to do this so that line's properties are not references to the\n    // arguments passed in\n    anchor = Sylvester.Vector.create(anchor);\n    direction = Sylvester.Vector.create(direction);\n    if (anchor.elements.length === 2) {anchor.elements.push(0); }\n    if (direction.elements.length === 2) { direction.elements.push(0); }\n    if (anchor.elements.length > 3 || direction.elements.length > 3) { return null; }\n    var mod = direction.modulus();\n    if (mod === 0) { return null; }\n    this.anchor = anchor;\n    this.direction = Sylvester.Vector.create([\n      direction.elements[0] / mod,\n      direction.elements[1] / mod,\n      direction.elements[2] / mod\n    ]);\n    return this;\n  }\n};\n\nSylvester.Line.create = function(anchor, direction) {\n  var L = new Sylvester.Line();\n  return L.setVectors(anchor, direction);\n};\nvar $L = Sylvester.Line.create;\n\nSylvester.Line.X = Sylvester.Line.create(Sylvester.Vector.Zero(3), Sylvester.Vector.i);\nSylvester.Line.Y = Sylvester.Line.create(Sylvester.Vector.Zero(3), Sylvester.Vector.j);\nSylvester.Line.Z = Sylvester.Line.create(Sylvester.Vector.Zero(3), Sylvester.Vector.k);\n\nSylvester.Line.Segment = function() {};\n\nSylvester.Line.Segment.prototype = {\n  eql: function(segment) {\n    return (this.start.eql(segment.start) && this.end.eql(segment.end)) ||\n        (this.start.eql(segment.end) && this.end.eql(segment.start));\n  },\n\n  dup: function() {\n    return Sylvester.Line.Segment.create(this.start, this.end);\n  },\n\n  length: function() {\n    var A = this.start.elements, B = this.end.elements;\n    var C1 = B[0] - A[0], C2 = B[1] - A[1], C3 = B[2] - A[2];\n    return Math.sqrt(C1*C1 + C2*C2 + C3*C3);\n  },\n\n  toVector: function() {\n    var A = this.start.elements, B = this.end.elements;\n    return Sylvester.Vector.create([B[0] - A[0], B[1] - A[1], B[2] - A[2]]);\n  },\n\n  midpoint: function() {\n    var A = this.start.elements, B = this.end.elements;\n    return Sylvester.Vector.create([(B[0] + A[0])/2, (B[1] + A[1])/2, (B[2] + A[2])/2]);\n  },\n\n  bisectingPlane: function() {\n    return Sylvester.Plane.create(this.midpoint(), this.toVector());\n  },\n\n  translate: function(vector) {\n    var V = vector.elements || vector;\n    var S = this.start.elements, E = this.end.elements;\n    return Sylvester.Line.Segment.create(\n      [S[0] + V[0], S[1] + V[1], S[2] + (V[2] || 0)],\n      [E[0] + V[0], E[1] + V[1], E[2] + (V[2] || 0)]\n    );\n  },\n\n  isParallelTo: function(obj) {\n    return this.line.isParallelTo(obj);\n  },\n\n  distanceFrom: function(obj) {\n    var P = this.pointClosestTo(obj);\n    return (P === null) ? null : P.distanceFrom(obj);\n  },\n\n  contains: function(obj) {\n    if (obj.start && obj.end) { return this.contains(obj.start) && this.contains(obj.end); }\n    var P = (obj.elements || obj).slice();\n    if (P.length === 2) { P.push(0); }\n    if (this.start.eql(P)) { return true; }\n    var S = this.start.elements;\n    var V = Sylvester.Vector.create([S[0] - P[0], S[1] - P[1], S[2] - (P[2] || 0)]);\n    var vect = this.toVector();\n    return V.isAntiparallelTo(vect) && V.modulus() <= vect.modulus();\n  },\n\n  intersects: function(obj) {\n    return (this.intersectionWith(obj) !== null);\n  },\n\n  intersectionWith: function(obj) {\n    if (!this.line.intersects(obj)) { return null; }\n    var P = this.line.intersectionWith(obj);\n    return (this.contains(P) ? P : null);\n  },\n\n  pointClosestTo: function(obj) {\n    if (obj.normal) {\n      // obj is a plane\n      var V = this.line.intersectionWith(obj);\n      if (V === null) { return null; }\n      return this.pointClosestTo(V);\n    } else {\n      // obj is a line (segment) or point\n      var P = this.line.pointClosestTo(obj);\n      if (P === null) { return null; }\n      if (this.contains(P)) { return P; }\n      return (this.line.positionOf(P) < 0 ? this.start : this.end).dup();\n    }\n  },\n\n  setPoints: function(startPoint, endPoint) {\n    startPoint = Sylvester.Vector.create(startPoint).to3D();\n    endPoint = Sylvester.Vector.create(endPoint).to3D();\n    if (startPoint === null || endPoint === null) { return null; }\n    this.line = Sylvester.Line.create(startPoint, endPoint.subtract(startPoint));\n    this.start = startPoint;\n    this.end = endPoint;\n    return this;\n  }\n};\n\nSylvester.Line.Segment.create = function(v1, v2) {\n  var S = new Sylvester.Line.Segment();\n  return S.setPoints(v1, v2);\n};\n\nSylvester.Plane = function() {};\n\nSylvester.Plane.prototype = {\n  eql: function(plane) {\n    return (this.contains(plane.anchor) && this.isParallelTo(plane));\n  },\n\n  dup: function() {\n    return Sylvester.Plane.create(this.anchor, this.normal);\n  },\n\n  translate: function(vector) {\n    var V = vector.elements || vector;\n    return Sylvester.Plane.create([\n      this.anchor.elements[0] + V[0],\n      this.anchor.elements[1] + V[1],\n      this.anchor.elements[2] + (V[2] || 0)\n    ], this.normal);\n  },\n\n  isParallelTo: function(obj) {\n    var theta;\n    if (obj.normal) {\n      // obj is a plane\n      theta = this.normal.angleFrom(obj.normal);\n      return (Math.abs(theta) <= Sylvester.precision || Math.abs(Math.PI - theta) <= Sylvester.precision);\n    } else if (obj.direction) {\n      // obj is a line\n      return this.normal.isPerpendicularTo(obj.direction);\n    }\n    return null;\n  },\n\n  isPerpendicularTo: function(plane) {\n    var theta = this.normal.angleFrom(plane.normal);\n    return (Math.abs(Math.PI/2 - theta) <= Sylvester.precision);\n  },\n\n  distanceFrom: function(obj) {\n    if (this.intersects(obj) || this.contains(obj)) { return 0; }\n    if (obj.anchor) {\n      // obj is a plane or line\n      var A = this.anchor.elements, B = obj.anchor.elements, N = this.normal.elements;\n      return Math.abs((A[0] - B[0]) * N[0] + (A[1] - B[1]) * N[1] + (A[2] - B[2]) * N[2]);\n    } else {\n      // obj is a point\n      var P = obj.elements || obj;\n      var A = this.anchor.elements, N = this.normal.elements;\n      return Math.abs((A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2]);\n    }\n  },\n\n  contains: function(obj) {\n    if (obj.normal) { return null; }\n    if (obj.direction) {\n      return (this.contains(obj.anchor) && this.contains(obj.anchor.add(obj.direction)));\n    } else {\n      var P = obj.elements || obj;\n      var A = this.anchor.elements, N = this.normal.elements;\n      var diff = Math.abs(N[0]*(A[0] - P[0]) + N[1]*(A[1] - P[1]) + N[2]*(A[2] - (P[2] || 0)));\n      return (diff <= Sylvester.precision);\n    }\n  },\n\n  intersects: function(obj) {\n    if (typeof(obj.direction) === 'undefined' && typeof(obj.normal) === 'undefined') { return null; }\n    return !this.isParallelTo(obj);\n  },\n\n  intersectionWith: function(obj) {\n    if (!this.intersects(obj)) { return null; }\n    if (obj.direction) {\n      // obj is a line\n      var A = obj.anchor.elements, D = obj.direction.elements,\n          P = this.anchor.elements, N = this.normal.elements;\n      var multiplier = (N[0]*(P[0]-A[0]) + N[1]*(P[1]-A[1]) + N[2]*(P[2]-A[2])) / (N[0]*D[0] + N[1]*D[1] + N[2]*D[2]);\n      return Sylvester.Vector.create([A[0] + D[0]*multiplier, A[1] + D[1]*multiplier, A[2] + D[2]*multiplier]);\n    } else if (obj.normal) {\n      // obj is a plane\n      var direction = this.normal.cross(obj.normal).toUnitVector();\n      // To find an anchor point, we find one co-ordinate that has a value of\n      // zero somewhere on the intersection, and remember which one we picked\n      var N = this.normal.elements, A = this.anchor.elements,\n          O = obj.normal.elements, B = obj.anchor.elements;\n      var solver = Sylvester.Matrix.Zero(2,2), i = 0;\n      while (solver.isSingular()) {\n        i++;\n        solver = Sylvester.Matrix.create([\n          [ N[i%3], N[(i+1)%3] ],\n          [ O[i%3], O[(i+1)%3]  ]\n        ]);\n      }\n      // Then we solve the simultaneous equations in the remaining dimensions\n      var inverse = solver.inverse().elements;\n      var x = N[0]*A[0] + N[1]*A[1] + N[2]*A[2];\n      var y = O[0]*B[0] + O[1]*B[1] + O[2]*B[2];\n      var intersection = [\n        inverse[0][0] * x + inverse[0][1] * y,\n        inverse[1][0] * x + inverse[1][1] * y\n      ];\n      var anchor = [];\n      for (var j = 1; j <= 3; j++) {\n        // This formula picks the right element from intersection by cycling\n        // depending on which element we set to zero above\n        anchor.push((i === j) ? 0 : intersection[(j + (5 - i)%3)%3]);\n      }\n      return Sylvester.Line.create(anchor, direction);\n    }\n  },\n\n  pointClosestTo: function(point) {\n    var P = point.elements || point;\n    var A = this.anchor.elements, N = this.normal.elements;\n    var dot = (A[0] - P[0]) * N[0] + (A[1] - P[1]) * N[1] + (A[2] - (P[2] || 0)) * N[2];\n    return Sylvester.Vector.create([P[0] + N[0] * dot, P[1] + N[1] * dot, (P[2] || 0) + N[2] * dot]);\n  },\n\n  rotate: function(t, line) {\n    var R = t.determinant ? t.elements : Sylvester.Matrix.Rotation(t, line.direction).elements;\n    var C = line.pointClosestTo(this.anchor).elements;\n    var A = this.anchor.elements, N = this.normal.elements;\n    var C1 = C[0], C2 = C[1], C3 = C[2], A1 = A[0], A2 = A[1], A3 = A[2];\n    var x = A1 - C1, y = A2 - C2, z = A3 - C3;\n    return Sylvester.Plane.create([\n      C1 + R[0][0] * x + R[0][1] * y + R[0][2] * z,\n      C2 + R[1][0] * x + R[1][1] * y + R[1][2] * z,\n      C3 + R[2][0] * x + R[2][1] * y + R[2][2] * z\n    ], [\n      R[0][0] * N[0] + R[0][1] * N[1] + R[0][2] * N[2],\n      R[1][0] * N[0] + R[1][1] * N[1] + R[1][2] * N[2],\n      R[2][0] * N[0] + R[2][1] * N[1] + R[2][2] * N[2]\n    ]);\n  },\n\n  reflectionIn: function(obj) {\n    if (obj.normal) {\n      // obj is a plane\n      var A = this.anchor.elements, N = this.normal.elements;\n      var A1 = A[0], A2 = A[1], A3 = A[2], N1 = N[0], N2 = N[1], N3 = N[2];\n      var newA = this.anchor.reflectionIn(obj).elements;\n      // Add the plane's normal to its anchor, then mirror that in the other plane\n      var AN1 = A1 + N1, AN2 = A2 + N2, AN3 = A3 + N3;\n      var Q = obj.pointClosestTo([AN1, AN2, AN3]).elements;\n      var newN = [Q[0] + (Q[0] - AN1) - newA[0], Q[1] + (Q[1] - AN2) - newA[1], Q[2] + (Q[2] - AN3) - newA[2]];\n      return Sylvester.Plane.create(newA, newN);\n    } else if (obj.direction) {\n      // obj is a line\n      return this.rotate(Math.PI, obj);\n    } else {\n      // obj is a point\n      var P = obj.elements || obj;\n      return Sylvester.Plane.create(this.anchor.reflectionIn([P[0], P[1], (P[2] || 0)]), this.normal);\n    }\n  },\n\n  setVectors: function(anchor, v1, v2) {\n    anchor = Sylvester.Vector.create(anchor);\n    anchor = anchor.to3D(); if (anchor === null) { return null; }\n    v1 = Sylvester.Vector.create(v1);\n    v1 = v1.to3D(); if (v1 === null) { return null; }\n    if (typeof(v2) === 'undefined') {\n      v2 = null;\n    } else {\n      v2 = Sylvester.Vector.create(v2);\n      v2 = v2.to3D(); if (v2 === null) { return null; }\n    }\n    var A1 = anchor.elements[0], A2 = anchor.elements[1], A3 = anchor.elements[2];\n    var v11 = v1.elements[0], v12 = v1.elements[1], v13 = v1.elements[2];\n    var normal, mod;\n    if (v2 !== null) {\n      var v21 = v2.elements[0], v22 = v2.elements[1], v23 = v2.elements[2];\n      normal = Sylvester.Vector.create([\n        (v12 - A2) * (v23 - A3) - (v13 - A3) * (v22 - A2),\n        (v13 - A3) * (v21 - A1) - (v11 - A1) * (v23 - A3),\n        (v11 - A1) * (v22 - A2) - (v12 - A2) * (v21 - A1)\n      ]);\n      mod = normal.modulus();\n      if (mod === 0) { return null; }\n      normal = Sylvester.Vector.create([normal.elements[0] / mod, normal.elements[1] / mod, normal.elements[2] / mod]);\n    } else {\n      mod = Math.sqrt(v11*v11 + v12*v12 + v13*v13);\n      if (mod === 0) { return null; }\n      normal = Sylvester.Vector.create([v1.elements[0] / mod, v1.elements[1] / mod, v1.elements[2] / mod]);\n    }\n    this.anchor = anchor;\n    this.normal = normal;\n    return this;\n  }\n};\n\nSylvester.Plane.create = function(anchor, v1, v2) {\n  var P = new Sylvester.Plane();\n  return P.setVectors(anchor, v1, v2);\n};\nvar $P = Sylvester.Plane.create;\n\nSylvester.Plane.XY = Sylvester.Plane.create(Sylvester.Vector.Zero(3), Sylvester.Vector.k);\nSylvester.Plane.YZ = Sylvester.Plane.create(Sylvester.Vector.Zero(3), Sylvester.Vector.i);\nSylvester.Plane.ZX = Sylvester.Plane.create(Sylvester.Vector.Zero(3), Sylvester.Vector.j);\nSylvester.Plane.YX = Sylvester.Plane.XY; Sylvester.Plane.ZY = Sylvester.Plane.YZ; Sylvester.Plane.XZ = Sylvester.Plane.ZX;\n\nSylvester.Plane.fromPoints = function(points) {\n  var np = points.length, list = [], i, P, n, N, A, B, C, D, theta, prevN, totalN = Sylvester.Vector.Zero(3);\n  for (i = 0; i < np; i++) {\n    P = Sylvester.Vector.create(points[i]).to3D();\n    if (P === null) { return null; }\n    list.push(P);\n    n = list.length;\n    if (n > 2) {\n      // Compute plane normal for the latest three points\n      A = list[n-1].elements; B = list[n-2].elements; C = list[n-3].elements;\n      N = Sylvester.Vector.create([\n        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n      ]).toUnitVector();\n      if (n > 3) {\n        // If the latest normal is not (anti)parallel to the previous one, we've\n        // strayed off the plane. This might be a slightly long-winded way of\n        // doing things, but we need the sum of all the normals to find which\n        // way the plane normal should point so that the points form an\n        // anticlockwise list.\n        theta = N.angleFrom(prevN);\n        if (theta !== null) {\n          if (!(Math.abs(theta) <= Sylvester.precision || Math.abs(theta - Math.PI) <= Sylvester.precision)) { return null; }\n        }\n      }\n      totalN = totalN.add(N);\n      prevN = N;\n    }\n  }\n  // We need to add in the normals at the start and end points, which the above\n  // misses out\n  A = list[1].elements; B = list[0].elements; C = list[n-1].elements; D = list[n-2].elements;\n  totalN = totalN.add(Sylvester.Vector.create([\n    (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n    (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n    (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n  ]).toUnitVector()).add(Sylvester.Vector.create([\n    (B[1] - C[1]) * (D[2] - C[2]) - (B[2] - C[2]) * (D[1] - C[1]),\n    (B[2] - C[2]) * (D[0] - C[0]) - (B[0] - C[0]) * (D[2] - C[2]),\n    (B[0] - C[0]) * (D[1] - C[1]) - (B[1] - C[1]) * (D[0] - C[0])\n  ]).toUnitVector());\n  return Sylvester.Plane.create(list[0], totalN);\n};\n\nSylvester.Polygon = function() {};\n\nSylvester.Polygon.prototype = {\n  v: function(i) {\n    return this.vertices.at(i - 1).data;\n  },\n\n  nodeFor: function(vertex) {\n    return this.vertices.withData(vertex);\n  },\n\n  dup: function() {\n    return Sylvester.Polygon.create(this.vertices, this.plane);\n  },\n\n  translate: function(vector) {\n    var P = vector.elements || vector;\n    this.vertices.each(function(node) {\n      var E = node.data.elements;\n      node.data.setElements([E[0] + P[0], E[1] + P[1], E[2] + (P[2] || 0)]);\n    });\n    this.plane = this.plane.translate(vector);\n    this.updateTrianglePlanes(function(plane) { return plane.translate(vector); });\n    return this;\n  },\n\n  rotate: function(t, line) {\n    var R = Sylvester.Matrix.Rotation(t, line.direction);\n    this.vertices.each(function(node) {\n      node.data.setElements(node.data.rotate(R, line).elements);\n    });\n    this.plane = this.plane.rotate(R, line);\n    this.updateTrianglePlanes(function(plane) { return plane.rotate(R, line); });\n    return this;\n  },\n\n  scale: function(k, point) {\n    var P = point.elements || point;\n    this.vertices.each(function(node) {\n      var E = node.data.elements;\n      node.data.setElements([\n        P[0] + k * (E[0] - P[0]),\n        P[1] + k * (E[1] - P[1]),\n        (P[2] || 0) + k * (E[2] - (P[2] || 0))\n      ]);\n    });\n    var anchor = this.vertices.first.data;\n    this.plane.anchor.setElements(anchor);\n    this.updateTrianglePlanes(function(plane) { return Sylvester.Plane.create(anchor, plane.normal); });\n    return this;\n  },\n\n  // Updates the plane properties of all the cached triangles belonging to the\n  // polygon according to the given function. For example, suppose you just\n  // rotated the polygon, you should call:\n  //\n  //   poly.updateTrianglePlanes(function(plane) { return plane.rotate(t, line); });\n  //\n  // This method is called automatically by Sylvester.Polygon.translate,\n  // Sylvester.Polygon.rotate and Sylvester.Polygon.scale transformation methods.\n  updateTrianglePlanes: function(fn) {\n    var i;\n    if (this.cached.triangles !== null) {\n      i = this.cached.triangles.length;\n      while (i--) {\n        this.cached.triangles[i].plane = fn(this.cached.triangles[i].plane);\n      }\n    }\n    if (this.cached.surfaceIntegralElements !== null) {\n      i = this.cached.surfaceIntegralElements.length;\n      while (i--) {\n        this.cached.surfaceIntegralElements[i].plane = fn(this.cached.surfaceIntegralElements[i].plane);\n      }\n    }\n  },\n\n  isTriangle: function() {\n    return this.vertices.length === 3;\n  },\n\n  // Returns a collection of triangles used for calculating area and center of\n  // mass. Some of the triangles will not lie inside the polygon - this\n  // collection is essentially a series of itervals in a surface integral, so\n  // some are 'negative'. If you want the polygon broken into constituent\n  // triangles, use toTriangles(). This method is used because it's much faster\n  // than toTriangles().\n  //\n  // The triangles generated share vertices with the original polygon, so they\n  // transform with the polygon. They are cached after first calculation and\n  // should remain in sync with changes to the parent polygon.\n  trianglesForSurfaceIntegral: function() {\n    if (this.cached.surfaceIntegralElements !== null) { return this.cached.surfaceIntegralElements; }\n    var triangles = [];\n    var firstVertex = this.vertices.first.data;\n    var plane = this.plane;\n    this.vertices.each(function(node, i) {\n      if (i < 2) { return; }\n      var points = [firstVertex, node.prev.data, node.data];\n      // If the vertices lie on a straigh line, give the polygon's own plane. If\n      // the element has no area, it doesn't matter which way its normal faces.\n      triangles.push(Sylvester.Polygon.create(points, Sylvester.Plane.fromPoints(points) || plane));\n    });\n    return this.setCache('surfaceIntegralElements', triangles);\n  },\n\n  area: function() {\n    if (this.isTriangle()) {\n      // Area is half the modulus of the cross product of two sides\n      var A = this.vertices.first, B = A.next, C = B.next;\n      A = A.data.elements; B = B.data.elements; C = C.data.elements;\n      return 0.5 * Sylvester.Vector.create([\n        (A[1] - B[1]) * (C[2] - B[2]) - (A[2] - B[2]) * (C[1] - B[1]),\n        (A[2] - B[2]) * (C[0] - B[0]) - (A[0] - B[0]) * (C[2] - B[2]),\n        (A[0] - B[0]) * (C[1] - B[1]) - (A[1] - B[1]) * (C[0] - B[0])\n      ]).modulus();\n    } else {\n      var trigs = this.trianglesForSurfaceIntegral(), area = 0;\n      var i = trigs.length;\n      while (i--) {\n        area += trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n      }\n      return area;\n    }\n  },\n\n  centroid: function() {\n    if (this.isTriangle()) {\n      var A = this.v(1).elements, B = this.v(2).elements, C = this.v(3).elements;\n      return Sylvester.Vector.create([(A[0] + B[0] + C[0])/3, (A[1] + B[1] + C[1])/3, (A[2] + B[2] + C[2])/3]);\n    } else {\n      var A, M = 0, V = Sylvester.Vector.Zero(3), P, C, trigs = this.trianglesForSurfaceIntegral();\n      var i = trigs.length;\n      while (i--) {\n        A = trigs[i].area() * trigs[i].plane.normal.dot(this.plane.normal);\n        M += A;\n        P = V.elements;\n        C = trigs[i].centroid().elements;\n        V.setElements([P[0] + C[0] * A, P[1] + C[1] * A, P[2] + C[2] * A]);\n      }\n      return V.x(1/M);\n    }\n  },\n\n  projectionOn: function(plane) {\n    var points = [];\n    this.vertices.each(function(node) { points.push(plane.pointClosestTo(node.data)); });\n    return Sylvester.Polygon.create(points);\n  },\n\n  removeVertex: function(vertex) {\n    if (this.isTriangle()) { return; }\n    var node = this.nodeFor(vertex);\n    if (node === null) { return null; }\n    this.clearCache();\n    // Previous and next entries in the main vertex list\n    var prev = node.prev, next = node.next;\n    var prevWasConvex = prev.data.isConvex(this);\n    var nextWasConvex = next.data.isConvex(this);\n    if (node.data.isConvex(this)) {\n      this.convexVertices.remove(this.convexVertices.withData(node.data));\n    } else {\n      this.reflexVertices.remove(this.reflexVertices.withData(node.data));\n    }\n    this.vertices.remove(node);\n    // Deal with previous vertex's change of class\n    if (prevWasConvex !== prev.data.isConvex(this)) {\n      if (prevWasConvex) {\n        this.convexVertices.remove(this.convexVertices.withData(prev.data));\n        this.reflexVertices.append(new Sylvester.LinkedList.Node(prev.data));\n      } else {\n        this.reflexVertices.remove(this.reflexVertices.withData(prev.data));\n        this.convexVertices.append(new Sylvester.LinkedList.Node(prev.data));\n      }\n    }\n    // Deal with next vertex's change of class\n    if (nextWasConvex !== next.data.isConvex(this)) {\n      if (nextWasConvex) {\n        this.convexVertices.remove(this.convexVertices.withData(next.data));\n        this.reflexVertices.append(new Sylvester.LinkedList.Node(next.data));\n      } else {\n        this.reflexVertices.remove(this.reflexVertices.withData(next.data));\n        this.convexVertices.append(new Sylvester.LinkedList.Node(next.data));\n      }\n    }\n    return this;\n  },\n\n  contains: function(point) {\n    return this.containsByWindingNumber(point);\n  },\n\n  containsByWindingNumber: function(point) {\n    var P = point.elements || point;\n    if (!this.plane.contains(P)) { return false; }\n    if (this.hasEdgeContaining(P)) { return false; }\n    var V, W, A, B, theta = 0, dt, loops = 0, self = this;\n    this.vertices.each(function(node) {\n      V = node.data.elements;\n      W = node.next.data.elements;\n      A = Sylvester.Vector.create([V[0] - P[0], V[1] - P[1], V[2] - (P[2] || 0)]);\n      B = Sylvester.Vector.create([W[0] - P[0], W[1] - P[1], W[2] - (P[2] || 0)]);\n      dt = A.angleFrom(B);\n      if (dt === null || dt === 0) { return; }\n      theta += (A.cross(B).isParallelTo(self.plane.normal) ? 1 : -1) * dt;\n      if (theta >= 2 * Math.PI - Sylvester.precision) { loops++; theta -= 2 * Math.PI; }\n      if (theta <= -2 * Math.PI + Sylvester.precision) { loops--; theta += 2 * Math.PI; }\n    });\n    return loops !== 0;\n  },\n\n  hasEdgeContaining: function(point) {\n    var P = (point.elements || point);\n    var success = false;\n    this.vertices.each(function(node) {\n      if (Sylvester.Line.Segment.create(node.data, node.next.data).contains(P)) { success = true; }\n    });\n    return success;\n  },\n\n  toTriangles: function() {\n    if (this.cached.triangles !== null) { return this.cached.triangles; }\n    return this.setCache('triangles', this.triangulateByEarClipping());\n  },\n\n  // Implementation of ear clipping algorithm\n  // Found in 'Triangulation by ear clipping', by David Eberly\n  // at http://www.geometrictools.com\n  // This will not deal with overlapping sections - contruct your polygons\n  // sensibly\n  triangulateByEarClipping: function() {\n    var poly = this.dup(), triangles = [], success, convexNode, mainNode, trig;\n    while (!poly.isTriangle()) {\n      success = false;\n      while (!success) {\n        success = true;\n        // Ear tips must be convex vertices - let's pick one at random\n        convexNode = poly.convexVertices.randomNode();\n        mainNode = poly.vertices.withData(convexNode.data);\n        // For convex vertices, this order will always be anticlockwise\n        trig = Sylvester.Polygon.create([mainNode.data, mainNode.next.data, mainNode.prev.data], this.plane);\n        // Now test whether any reflex vertices lie within the ear\n        poly.reflexVertices.each(function(node) {\n          // Don't test points belonging to this triangle. node won't be equal\n          // to convexNode as node is reflex and vertex is convex.\n          if (node.data !== mainNode.prev.data && node.data !== mainNode.next.data) {\n            if (trig.contains(node.data) || trig.hasEdgeContaining(node.data)) { success = false; }\n          }\n        });\n      }\n      triangles.push(trig);\n      poly.removeVertex(mainNode.data);\n    }\n    // Need to do this to renumber the remaining vertices\n    triangles.push(Sylvester.Polygon.create(poly.vertices, this.plane));\n    return triangles;\n  },\n\n  setVertices: function(points, plane) {\n    var pointSet = points.toArray ? points.toArray() : points;\n    this.plane = (plane && plane.normal) ? plane.dup() : Sylvester.Plane.fromPoints(pointSet);\n    if (this.plane === null) { return null; }\n    this.vertices = new Sylvester.LinkedList.Circular();\n    // Construct linked list of vertices. If each point is already a polygon\n    // vertex, we reference it rather than creating a new vertex.\n    var i = pointSet.length, newVertex;\n    while (i--) {\n      newVertex = pointSet[i].isConvex ? pointSet[i] : new Sylvester.Polygon.Vertex(pointSet[i]);\n      this.vertices.prepend(new Sylvester.LinkedList.Node(newVertex));\n    }\n    this.clearCache();\n    this.populateVertexTypeLists();\n    return this;\n  },\n\n  populateVertexTypeLists: function() {\n    this.convexVertices = new Sylvester.LinkedList.Circular();\n    this.reflexVertices = new Sylvester.LinkedList.Circular();\n    var self = this;\n    this.vertices.each(function(node) {\n      // Split vertices into convex / reflex groups. The\n      // Sylvester.LinkedList.Node class wraps each vertex so it can belong to\n      // many linked lists.\n      self[node.data.type(self) + 'Vertices'].append(new Sylvester.LinkedList.Node(node.data));\n    });\n  },\n\n  copyVertices: function() {\n    this.clearCache();\n    this.vertices.each(function(node) {\n      node.data = new Sylvester.Polygon.Vertex(node.data);\n    });\n    this.populateVertexTypeLists();\n  },\n\n  clearCache: function() {\n    this.cached = {\n      triangles: null,\n      surfaceIntegralElements: null\n    };\n  },\n\n  setCache: function(key, value) {\n    this.cached[key] = value;\n    return value;\n  },\n\n  inspect: function() {\n    var points = [];\n    this.vertices.each(function(node) { points.push(node.data.inspect()); });\n    return points.join(' -> ');\n  }\n};\n\nSylvester.Polygon.create = function(points, plane) {\n  var P = new Sylvester.Polygon();\n  return P.setVertices(points, plane);\n};\n\nSylvester.Polygon.Vertex = function(point) {\n  this.setElements(point);\n  if (this.elements.length === 2) { this.elements.push(0); }\n  if (this.elements.length !== 3) { return null; }\n};\nSylvester.Polygon.Vertex.prototype = new Sylvester.Vector;\n\n// Returns true iff the vertex's internal angle is 0 <= x < 180\n// in the context of the given polygon object. Returns null if the\n// vertex does not exist in the polygon.\nSylvester.Polygon.Vertex.prototype.isConvex = function(polygon) {\n  var node = polygon.nodeFor(this);\n  if (node === null) { return null; }\n  var prev = node.prev.data, next = node.next.data;\n  var A = next.subtract(this);\n  var B = prev.subtract(this);\n  var theta = A.angleFrom(B);\n  if (theta <= Sylvester.precision) { return true; }\n  if (Math.abs(theta - Math.PI) <= Sylvester.precision) { return false; }\n  return (A.cross(B).dot(polygon.plane.normal) > 0);\n};\n// Returns true iff the vertex's internal angle is 180 <= x < 360\nSylvester.Polygon.Vertex.prototype.isReflex = function(polygon) {\n  var result = this.isConvex(polygon);\n  return (result === null) ? null : !result;\n};\nSylvester.Polygon.Vertex.prototype.type = function(polygon) {\n  var result = this.isConvex(polygon);\n  return (result === null) ? null : (result ? 'convex' : 'reflex');\n};\n\n// Method for converting a set of arrays/vectors/whatever to a set of Sylvester.Polygon.Vertex objects\nSylvester.Polygon.Vertex.convert = function(points) {\n  var pointSet = points.toArray ? points.toArray() : points;\n  var list = [], n = pointSet.length;\n  for (var i = 0; i < n; i++) {\n    list.push(new Sylvester.Polygon.Vertex(pointSet[i]));\n  }\n  return list;\n};\n\nSylvester.LinkedList = function() {};\n\nSylvester.LinkedList.prototype = {\n  length: 0,\n  first: null,\n  last: null,\n\n  forEach: function(fn, context) {\n    var node = this.first, n = this.length;\n    for (var i = 0; i < n; i++) {\n      fn.call(context, node, i);\n      node = node.next;\n    }\n  },\n\n  at: function(i) {\n    if (!(i >= 0 && i < this.length)) { return null; }\n    var node = this.first;\n    while (i--) { node = node.next; }\n    return node;\n  },\n\n  randomNode: function() {\n    var n = Math.floor(Math.random() * this.length);\n    return this.at(n);\n  },\n\n  toArray: function() {\n    var arr = [], node = this.first, n = this.length;\n    while (n--) {\n      arr.push(node.data || node);\n      node = node.next;\n    }\n    return arr;\n  }\n};\n\nSylvester.LinkedList.prototype.each = Sylvester.LinkedList.prototype.forEach;\n\nSylvester.LinkedList.Node = function(data) {\n  this.prev = null; this.next = null;\n  this.data = data;\n};\n\nSylvester.LinkedList.Circular = function() {};\nSylvester.LinkedList.Circular.Methods = {\n  append: function(node) {\n    if (this.first === null) {\n      node.prev = node;\n      node.next = node;\n      this.first = node;\n      this.last = node;\n    } else {\n      node.prev = this.last;\n      node.next = this.first;\n      this.first.prev = node;\n      this.last.next = node;\n      this.last = node;\n    }\n    this.length++;\n  },\n\n  prepend: function(node) {\n    if (this.first === null) {\n      this.append(node);\n      return;\n    } else {\n      node.prev = this.last;\n      node.next = this.first;\n      this.first.prev = node;\n      this.last.next = node;\n      this.first = node;\n    }\n    this.length++;\n  },\n\n  insertAfter: function(node, newNode) {\n    newNode.prev = node;\n    newNode.next = node.next;\n    node.next.prev = newNode;\n    node.next = newNode;\n    if (newNode.prev === this.last) { this.last = newNode; }\n    this.length++;\n  },\n\n  insertBefore: function(node, newNode) {\n    newNode.prev = node.prev;\n    newNode.next = node;\n    node.prev.next = newNode;\n    node.prev = newNode;\n    if (newNode.next === this.first) { this.first = newNode; }\n    this.length++;\n  },\n\n  remove: function(node) {\n    if (this.length > 1) {\n      node.prev.next = node.next;\n      node.next.prev = node.prev;\n      if (node === this.first) { this.first = node.next; }\n      if (node === this.last) { this.last = node.prev; }\n    } else {\n      this.first = null;\n      this.last = null;\n    }\n    node.prev = null;\n    node.next = null;\n    this.length--;\n  },\n\n  withData: function(data) {\n    var nodeFromStart = this.first, nodeFromEnd = this.last, n = Math.ceil(this.length / 2);\n    while (n--) {\n      if (nodeFromStart.data === data) { return nodeFromStart; }\n      if (nodeFromEnd.data === data) { return nodeFromEnd; }\n      nodeFromStart = nodeFromStart.next;\n      nodeFromEnd = nodeFromEnd.prev;\n    }\n    return null;\n  }\n};\n\nSylvester.LinkedList.Circular.prototype = new Sylvester.LinkedList;\nfor (var method in Sylvester.LinkedList.Circular.Methods) {\n  Sylvester.LinkedList.Circular.prototype[method] = Sylvester.LinkedList.Circular.Methods[method];\n}\n\nSylvester.LinkedList.Circular.fromArray = function(list, useNodes) {\n  var linked = new Sylvester.LinkedList.Circular();\n  var n = list.length;\n  while (n--) { linked.prepend(useNodes ? new Sylvester.LinkedList.Node(list[n]) : list[n]); }\n  return linked;\n};\n\n(function() {\n  var api = (typeof require === 'function' && typeof exports === 'object')\n          ? exports\n          : this;\n\n  api.Line    = Sylvester.Line;\n  api.Matrix  = Sylvester.Matrix;\n  api.Plane   = Sylvester.Plane;\n  api.Polygon = Sylvester.Polygon;\n  api.Vector  = Sylvester.Vector;\n\n  if (typeof WScript !== 'undefined')\n    this.Sylvester = Sylvester;\n})();\n","// CommonJS style module & browserify support\nif (typeof require === 'function' && typeof exports === 'object') {\n  var Sylvester = require('sylvester');\n\n  var Vector = Sylvester.Vector;\n  var Matrix = Sylvester.Matrix;\n  var $V = Sylvester.Vector.create;\n  var $M = Sylvester.Matrix.create;\n\n  Sylvester.makeLookAt      = makeLookAt\n  Sylvester.makePerspective = makePerspective\n  Sylvester.makeFrustum     = makeFrustum\n  Sylvester.makeOrtho       = makeOrtho\n}\n\n// Make translation transform matrix\nMatrix.Translation = function(v) {\n  var r;\n  switch(v.elements.length) {\n  case 2:\n    r = Matrix.I(3);\n    r.elements[2][0] = v.elements[0];\n    r.elements[2][1] = v.elements[1];\n    return r;\n  case 3:\n    r = Matrix.I(4);\n    r.elements[0][3] = v.elements[0];\n    r.elements[1][3] = v.elements[1];\n    r.elements[2][3] = v.elements[2];\n    return r;\n  }\n\n  throw new Error('Invalid length for Translation', 'sylvester-utils.js', 18);\n};\n\n// return column-major flattened matrix in array form\nMatrix.prototype.flatten = function() {\n  var result = [];\n\n  if (this.elements.length !== 0) {\n    var cols = this.elements[0].length;\n    for (var j = 0; j < cols; j++) {\n      var rows = this.elements.length;\n      for (var i = 0; i < rows; i++) {\n        result.push(this.elements[i][j]);\n      }\n    }\n  }\n\n  return result;\n};\n\n// if Matrix is smaller or equal to 4x4: make it 4x4\n// else: do nothing and return null\nMatrix.prototype.ensure4x4 = function() {\n  var dim = this.elements;\n  var rows = dim.length;\n  var cols = dim[0].length;\n\n  if (rows === 4 && cols === 4) return this;\n  if (rows > 4 || cols > 4) return null;\n\n  var i, j;\n  // Extending each rows\n  for (i = 0; i < rows; ++i) {\n    var row = dim[i];\n    for (j = row.length; j < 4; ++j) {\n      row.push( i === j ? 1 : 0 );\n    }\n  }\n\n  // Making new rows\n  switch(rows) {\n  case 0:\n    dim.push([1, 0, 0, 0]);\n    /* falls through */\n  case 1:\n    dim.push([0, 1, 0, 0]);\n    /* falls through */\n  case 2:\n    dim.push([0, 0, 1, 0]);\n    /* falls through */\n  case 3:\n    dim.push([0, 0, 0, 1]);\n  }\n\n  return this;\n};\n\n// if matrix is 4x4: return 3x3 subset of it\n// else: do nothing and return null\nMatrix.prototype.make3x3 = function() {\n  return this.elements.length === 4 && this.elements[0].length === 4 ?\n    Matrix.create([[this.elements[0][0], this.elements[0][1], this.elements[0][2]],\n      [this.elements[1][0], this.elements[1][1], this.elements[1][2]],\n      [this.elements[2][0], this.elements[2][1], this.elements[2][2]]]) :\n    null;\n};\n\n// return the vector in array form\nVector.prototype.flatten = function () { return this.elements; };\n\n// make a viewing transformation (gluLookAt)\nfunction makeLookAt(ex, ey, ez, cx, cy, cz, ux, uy, uz) {\n  var eye = $V([ex, ey, ez]);\n  var center = $V([cx, cy, cz]);\n  var up = $V([ux, uy, uz]);\n\n  var z = eye.subtract(center).toUnitVector();\n  var x = up.cross(z).toUnitVector();\n  var y = z.cross(x).toUnitVector();\n\n  var m = $M([[x.e(1), x.e(2), x.e(3), 0],\n      [y.e(1), y.e(2), y.e(3), 0],\n      [z.e(1), z.e(2), z.e(3), 0],\n      [0, 0, 0, 1]]);\n\n  var t = $M([[1, 0, 0, -ex],\n      [0, 1, 0, -ey],\n      [0, 0, 1, -ez],\n      [0, 0, 0, 1]]);\n  return m.x(t);\n}\n\n// make a perspective projection matrix (gluPerspective)\nfunction makePerspective(fovy, aspect, znear, zfar) {\n  var ymax = znear * Math.tan(fovy * Math.PI / 360.0);\n  var ymin = -ymax;\n  var xmin = ymin * aspect;\n  var xmax = ymax * aspect;\n\n  return makeFrustum(xmin, xmax, ymin, ymax, znear, zfar);\n}\n\n// make a perspective matrix (glFrustum)\nfunction makeFrustum(left, right, bottom, top, znear, zfar) {\n  var X = 2*znear/(right-left);\n  var Y = 2*znear/(top-bottom);\n  var A = (right+left)/(right-left);\n  var B = (top+bottom)/(top-bottom);\n  var C = -(zfar+znear)/(zfar-znear);\n  var D = -2*zfar*znear/(zfar-znear);\n\n  return $M([[X, 0, A, 0],\n      [0, Y, B, 0],\n      [0, 0, C, D],\n      [0, 0, -1, 0]]);\n}\n\n// make an orthographic matrix (glOrtho)\nfunction makeOrtho(left, right, bottom, top, znear, zfar) {\n  var tx = - (right + left) / (right - left);\n  var ty = - (top + bottom) / (top - bottom);\n  var tz = - (zfar + znear) / (zfar - znear);\n\n  return $M([[2 / (right - left), 0, 0, tx],\n      [0, 2 / (top - bottom), 0, ty],\n      [0, 0, -2 / (zfar - znear), tz],\n      [0, 0, 0, 1]]);\n}\n","import { Matrix, Vector, makePerspective } from 'sylvester'\nimport 'sylvester-utils'\n\nconst $V = Vector.create\nconst canvas = document.getElementById('screen')\nconst gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl')\n\nlet resized = true\n\nwindow.addEventListener('resize', () => {\n  resized = true\n})\ngl.clearColor(0.0, 0.0, 0.0, 1.0)\ngl.clearDepth(1.0)\ngl.enable(gl.DEPTH_TEST)\ngl.depthFunc(gl.LEQUAL)\n\nfunction makeShader(shader, code) {\n  gl.shaderSource(shader, code)\n  gl.compileShader(shader)\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw Error('unimplemented')\n  }\n  return shader\n}\n\nconst vs = makeShader(\n  gl.createShader(gl.VERTEX_SHADER),\n  `\n    attribute vec3 aVertexPosition;\n    attribute vec4 aVertexColor;\n\n    uniform mat4 uMVMatrix;\n    uniform mat4 uPMatrix;\n\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);\n      vColor = aVertexColor;\n    }\n  `\n)\n\nconst fs = makeShader(\n  gl.createShader(gl.FRAGMENT_SHADER),\n  `\n    varying lowp vec4 vColor;\n\n    void main(void) {\n      gl_FragColor = vColor;\n    }\n  `\n)\n\nconst program = gl.createProgram()\ngl.attachShader(program, vs)\ngl.attachShader(program, fs)\ngl.linkProgram(program)\nif (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n  throw Error('unimplemented')\n}\ngl.useProgram(program)\n\nfunction makeAttr(name) {\n  const attr = gl.getAttribLocation(program, name)\n  gl.enableVertexAttribArray(attr)\n  return attr\n}\nconst vertexPositionAttribute = makeAttr('aVertexPosition')\nconst vertexColorAttribute = makeAttr('aVertexColor')\n\nfunction makeBuffer(data) {\n  const ret = gl.createBuffer()\n  gl.bindBuffer(gl.ARRAY_BUFFER, ret)\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW)\n  return ret\n}\n\nconst vb = makeBuffer([+1, +1, +0, -1, +1, +0, +1, -1, +0, -1, -1, +0])\nconst colorb = makeBuffer([1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1])\nsetInterval(render, 15)\n\nfunction render() {\n  const mvMatrix = Matrix.Translation($V([0, 0, -6])).ensure4x4()\n  const mvUniform = gl.getUniformLocation(program, 'uMVMatrix')\n  gl.uniformMatrix4fv(mvUniform, false, new Float32Array(mvMatrix.flatten()))\n\n  const pMatrix = makePerspective(45, 1, 0.1, 100.0)\n  const pUniform = gl.getUniformLocation(program, 'uPMatrix')\n  gl.uniformMatrix4fv(pUniform, false, new Float32Array(pMatrix.flatten()))\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, vb)\n  gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0)\n  gl.bindBuffer(gl.ARRAY_BUFFER, colorb)\n  gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0)\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4)\n\n  if (resized) {\n    if (gl.canvas.width !== gl.canvas.clientWidth) {\n      gl.canvas.width = gl.canvas.clientWidth\n    }\n    if (gl.canvas.height !== gl.canvas.clientHeight) {\n      gl.canvas.height = gl.canvas.clientHeight\n    }\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n  }\n}\n"],"names":["Sylvester","method","precision","Vector","create","elements","setElements","Random","n","push","Math","random","Zero","prototype","e","i","this","length","dimensions","modulus","sqrt","dot","eql","vector","V","abs","dup","map","fn","context","each","x","call","forEach","toUnitVector","r","angleFrom","mod1","mod2","theta","acos","isParallelTo","angle","isAntiparallelTo","PI","isPerpendicularTo","add","subtract","multiply","k","product","cross","B","A","max","m","indexOf","index","toDiagonalMatrix","Matrix","Diagonal","round","snapTo","y","distanceFrom","obj","anchor","start","end","part","sum","liesOn","line","contains","liesIn","plane","rotate","t","z","R","determinant","Rotation","direction","C","pointClosestTo","reflectionIn","P","slice","Q","to3D","inspect","join","els","j","I","M","a","cos","sin","axis","mod","s","c","RotationX","RotationY","RotationZ","row","col","cols","rows","matrix","nj","isSameSizeAs","canMultiplyFromLeft","returnVector","minor","b","d","ni","transpose","isSquare","diagonal","toRightTriangular","p","np","multiplier","det","isSingular","trace","tr","rank","augment","T","inverse","divisor","new_element","inverse_elements","matrix_rows","toUpperTriangular","rk","inv","Line","translate","normal","N","D","PA1","PA2","PA3","modPA","cosTheta","sin2","dist","positionOf","point","intersects","intersectionWith","X","Y","X1","X2","X3","Y1","Y2","Y3","PsubQ1","PsubQ2","PsubQ3","YdotY","XdotY","E","D1","D2","D3","E1","E2","E3","Plane","A1","A2","A3","C1","C2","C3","reverse","newA","AD1","AD2","AD3","newD","setVectors","Z","Segment","segment","toVector","midpoint","bisectingPlane","S","vect","setPoints","startPoint","endPoint","v1","v2","O","solver","intersection","N1","N2","N3","AN1","AN2","AN3","newN","v11","v12","v13","v21","v22","v23","XY","YZ","ZX","YX","ZY","XZ","fromPoints","points","prevN","list","totalN","Polygon","v","vertices","at","data","nodeFor","vertex","withData","node","updateTrianglePlanes","scale","first","cached","triangles","surfaceIntegralElements","isTriangle","trianglesForSurfaceIntegral","firstVertex","prev","setCache","area","next","trigs","centroid","projectionOn","removeVertex","clearCache","prevWasConvex","isConvex","nextWasConvex","convexVertices","remove","reflexVertices","append","LinkedList","Node","containsByWindingNumber","hasEdgeContaining","W","dt","loops","self","success","toTriangles","triangulateByEarClipping","convexNode","mainNode","trig","poly","randomNode","setVertices","pointSet","toArray","Circular","newVertex","Vertex","prepend","populateVertexTypeLists","type","copyVertices","key","value","polygon","isReflex","result","convert","last","floor","arr","Methods","insertAfter","newNode","insertBefore","nodeFromStart","nodeFromEnd","ceil","fromArray","useNodes","linked","api","$d91c669937dcc03f09c45000854ee960$exports","$d91c669937dcc03f09c45000854ee960$var$_typeof","WScript","$f757c5065c8da4aa5ba8f8d295c$exports","$f757c5065c8da4aa5ba8f8d295c$var$_typeof","$d91c669937dcc03f09c45000854ee960$init","$V","$M","makeLookAt","ex","ey","ez","cx","cy","cz","ux","uy","uz","eye","center","up","makePerspective","fovy","aspect","znear","zfar","ymax","tan","ymin","makeFrustum","makeOrtho","left","right","bottom","top","Translation","Error","flatten","ensure4x4","dim","make3x3","canvas","document","getElementById","gl","getContext","resized","makeShader","shader","code","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","window","addEventListener","clearColor","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","makeAttr","name","attr","getAttribLocation","enableVertexAttribArray","useProgram","vertexPositionAttribute","vertexColorAttribute","makeBuffer","ret","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","vb","colorb","setInterval","mvMatrix","mvUniform","getUniformLocation","uniformMatrix4fv","pMatrix","pUniform","vertexAttribPointer","FLOAT","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","drawArrays","TRIANGLE_STRIP","width","clientWidth","height","clientHeight","viewport"],"version":3,"file":"index.1412087a.js.map"}